name: CI

on:
  push:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Toolchain
      id: toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: "clippy, rustfmt"
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          target/
          # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-rustc-${{ steps.toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock', '.github/workflows/ci.yml', '.github/workflows/pr.yml') }}
    - name: Format
      run: cargo fmt --all -- --check
    - name: Clippy
      if: success() || failure()
      run: cargo clippy -- -D warnings
    - name: Test
      if: success() || failure()
      run: cargo test
  
  rel:
    name: Create Release
    needs: ["check"]
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Toolchain
      id: toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-gnu
    - name: Install Windows Cross Tools
      run: |
        sudo apt update
        sudo apt install gcc-mingw-w64-x86-64-win32
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          target/
          # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-rustc-${{ steps.toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock', '.github/workflows/ci.yml') }}
    - name: Version
      id: version
      run: |
        echo "version=$(cargo metadata --format-version 1 | jq --raw-output '.packages[] | select(.name=="hanzo") | .version')" >> $GITHUB_OUTPUT
        echo "sha=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_OUTPUT
    - name: Build
      run: cargo build --release
    - name: Build for Windows
      run: cargo build --release --bin client --target x86_64-pc-windows-gnu --config target.x86_64-pc-windows-gnu.linker=\"x86_64-w64-mingw32-gcc-win32\" --config target.x86_64-pc-windows-gnu.ar=\"x86_64-w64-mingw32-ar-win32\"
    - name: Create Release
      id: create_release
      uses: marvinpinto/action-automatic-releases@latest
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        automatic_release_tag: ${{ steps.version.outputs.version }}-${{ steps.version.outputs.sha }}
        title: v${{ steps.version.outputs.version }}-${{ steps.version.outputs.sha }}
        draft: true
        prerelease: false
        files: |
          target/release/client
          target/release/server
          target/x86_64-pc-windows-gnu/release/client.exe
